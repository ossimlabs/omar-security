//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR security plugin.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

def notifyObj
node("omar-build"){
    def workspaceDir = pwd()
    def appName = "omar-security"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"
    env.O2_DEV_HOME=pwd()

    stage("Checkout"){
        dir(appName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${appName}.git"
        }

        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${omarCommonProjName}.git"
        }
    }

    stage("Download Artifacts"){
       step ([$class: "CopyArtifact",
             projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
             filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
             flatten: true])
       sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
       notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
        stage('SonarQube analysis') {
            withSonarQubeEnv('sonar_cloud') {
                // requires SonarQube Scanner for Gradle 2.1+
                // It's important to add --info because of SONARJNKNS-281
                sh """
                  pushd ${workspaceDir}/${appName}
                  ./gradlew --info :${appName}-plugin:sonarqube -Dsonar.projectKey=${appName}
                  popd
                """
            }
        }
    }
    catch (e) {
        echo e.toString()
    }

    try {
        stage ("Publish Plugin Nexus")
        {
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'nexusCredentials',
                            usernameVariable: 'REPOSITORY_MANAGER_USER',
                            passwordVariable: 'REPOSITORY_MANAGER_PASSWORD']])
            {
                sh """
                pushd ${workspaceDir}/${appName}
                gradle :${appName}-plugin:upload
                popd
                """
            }
        }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
  stage("Clean Workspace"){
     step([$class: 'WsCleanup'])
  }
}
